import{z as l,C as o,y as n,A as p}from"../index74600.js";class t{static async uploadFile(s){return(await l("uploads",s)).data}static async uploadResponse(s){const a={headers:{"Content-Type":s.file.type}};return delete o.defaults.headers.common.uid,delete o.defaults.headers.common.Uid,delete o.defaults.headers.common["token-type"],delete o.defaults.headers.common["access-token"],delete o.defaults.headers.common.client,await o.put(s.upload_url,s.file,a)}static async uploadDone(s){return(await l(`/uploads/${s}/done`,{})).data}static async deleteFile(s){const a=new Map;return(await n(`/uploads/${s}`,a)).data}}const i=p({id:"upload",state:()=>({upload:{},uploads:[],response_uploads:{},upload_id:""}),getters:{allUploads:e=>e.uploads,responseUploads:e=>e.response_uploads,getCurrentUpload:e=>e.upload},actions:{async uploadFile(e){const s=e.file;await t.uploadFile(e).then(a=>{const d={file:s,upload_url:a.upload_url};return this.upload_id=a.upload.id,this.uploadResponse(d)})},async uploadResponse(e){await t.uploadResponse(e).then(()=>this.uploadDone())},async uploadDone(){await t.uploadDone(this.upload_id).then(e=>{this.response_uploads=e})},async deleteFile(e){await t.deleteFile(e)}}});export{i as u};
